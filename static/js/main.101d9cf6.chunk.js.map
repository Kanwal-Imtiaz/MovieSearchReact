{"version":3,"sources":["components/Header.js","components/MovieRow.js","components/MovieList.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","props","title","className","alt","src","width","MovieRow","url","this","movie","id","window","open","key","poster_src","overview","vote_average","type","value","onClick","viewMovie","bind","React","Component","MovieList","movies","map","i","App","state","rows","performSearch","searchTerm","urlString","$","ajax","success","searchResults","results","movieRows","forEach","poster_path","push","setState","error","xhr","status","err","console","event","searchMovie","target","placeholder","onChange","searchChangeHandler","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gUA2BeA,MAxBf,SAAgBC,GACf,IACOC,EAASD,EAATC,MAEP,OAEG,2BAAOC,UAAU,YACH,+BACE,4BACE,4BACA,yBAAKC,IAAI,WAAWC,IAAK,WAAYC,MAAM,QAG3C,wBAAIA,MAAM,MAEV,4BACE,4BAAKJ,QC4BdK,G,gMArCb,IAAMC,EAAM,oCAAqCC,KAAKR,MAAMS,MAAMC,GAClEC,OAAOC,KAAKL,K,+BAIb,OACC,yBAAKL,UAAU,aACf,2BAAOW,IAAKL,KAAKR,MAAMS,MAAMC,GAAIR,UAAU,OACrC,+BACE,4BACE,4BACA,yBAAKA,UAAU,SAASC,IAAK,SAASC,IAAMI,KAAKR,MAAMS,MAAMK,WAAYT,MAAM,SAI/E,wBAAIA,MAAM,MAEV,4BACA,4BAAKG,KAAKR,MAAMS,MAAMR,OAEtB,+BAAKO,KAAKR,MAAMS,MAAMM,SAAtB,KACA,uCAAaP,KAAKR,MAAMS,MAAMO,cAC9B,6BACA,2BAAOd,UAAU,MAAMe,KAAK,SAASC,MAAM,OAAOC,QAASX,KAAKY,UAAUC,KAAKb,iB,GA7BpEc,IAAMC,YCYdC,MAbf,YAGA,OAH8B,EAATC,OAKNC,KAAI,SAACjB,EAAMkB,GACrB,OACC,kBAAC,EAAD,CAAUd,IAAMJ,EAAMC,GAAID,MAAQA,Q,gBCwEzBmB,E,YAzEb,WAAY5B,GAAO,IAAD,8BAChB,4CAAMA,KAOD6B,MAAQ,CACZ5B,MAAO,kBACP6B,KAAM,IAGP,EAAKC,cAAc,KAbH,E,2EAiBJC,GAAY,IAAD,OAGjBC,EAAW,4FAA4FD,EAC7GE,IAAEC,KAAK,CACL5B,IAAK0B,EACLG,QAAS,SAACC,GAGR,IAAMC,EAAUD,EAAcC,QAC1BC,EAAW,GAEfD,EAAQE,SAAQ,SAAC/B,GACfA,EAAMK,WAAa,kCAAoCL,EAAMgC,YAG7DF,EAAUG,KAAKjC,MAGjB,EAAKkC,SAAS,CAACb,KAAMS,KAEvBK,MAAO,SAACC,EAAKC,EAAQC,GACnBC,QAAQJ,MAAM,6B,0CASDK,GACnB,IAAMC,EAAcD,EAAME,OAAOjC,MACdV,KACRuB,cAAcmB,K,+BAKnB,OACI,6BAEG,kBAAC,EAAD,CAAQjD,MAAQO,KAAKqB,MAAM5B,QAE1B,2BAAOC,UAAU,YAAYkD,YAAa,oBAAoBC,SAAU7C,KAAK8C,oBAAoBjC,KAAKb,QAEvG,kBAAC,EAAD,CAAWiB,OAAQjB,KAAKqB,MAAMC,Y,GAhE3BR,IAAMC,WCIJgC,QACW,cAA7B5C,OAAO6C,SAASC,UAEe,UAA7B9C,OAAO6C,SAASC,UAEhB9C,OAAO6C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.101d9cf6.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\nfunction Header(props) \n{\n\tconst {title} = props;\n\n\treturn(\n    \n \t\t\t<table className=\"titleBar\">\n                  <tbody>\n                    <tr> \n                      <td>\n                      <img alt=\"app icon\" src =\"icon.png\"  width=\"50\"/>\n                      </td>\n\n                      <td width=\"8\" />\n\n                      <td>\n                        <h1>{title}</h1>\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n   \n\t\t );\n}\nexport default Header;","import React from 'react'\nimport './MovieRow.css';\n\n\nclass MovieRow extends React.Component\n{\n\n \tviewMovie(){\n \t\t//console.log(\"*Trying to view movie*\" );\n\t\t//console.log(this.props.movie.title);\n\t\tconst url = \"https://www.themoviedb.org/movie/\" +this.props.movie.id;\n\t\twindow.open(url); \n\t}\n\nrender(){\n\treturn(\n\t\t<div className=\"container\">\n\t\t<table key={this.props.movie.id} className=\"row\"> \n        <tbody>\n          <tr>\n            <td> \n            <img className=\"poster\" alt= \"poster\" src ={this.props.movie.poster_src} width=\"150\"/>\n\n            </td>\n\n            <td width=\"8\" />\n\n            <td>\n            <h3>{this.props.movie.title}</h3>\n\n            <p> {this.props.movie.overview} </p>\n            <p> Rating: {this.props.movie.vote_average}</p>\n            <br/>\n            <input className=\"btn\" type=\"button\" value=\"View\" onClick={this.viewMovie.bind(this)}/>\n\n            </td>\n          </tr>\n\n        </tbody>\n       </table>\n       </div>\n\n\t\t\n\t);\n}\n}\n\nexport default MovieRow;","import React from 'react'\nimport MovieRow from './MovieRow';\n\nfunction MovieList({ movies }){\n\n\nreturn(\n\n        movies.map((movie,i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<MovieRow key= {movie.id} movie ={movie} />\n\t\t\t\t\t);\n\t\t\t\t})\n\n\t);\n}\nexport default MovieList;","import React from 'react';\nimport Header from './Header';\nimport './App.css';\n//import MovieRow from './MovieRow';\nimport MovieList from './MovieList';\nimport $ from 'jquery'; \n\n\nclass App extends React.Component{\n  constructor(props){\n    super(props)\n\n\n    /* https://api.themoviedb.org/3/search/movie?query=marvel&api_key=753aff9045ea9cd4451a39c6b2898dcc\n\n      API-Key= 753aff9045ea9cd4451a39c6b2898dcc*/\n\n    this.state = {\n     title: 'MoviesDB Search',\n     rows: [],\n    };\n\n    this.performSearch(\"A\");\n  }\n\n//callback function \"searchResults\" to run on success\n  performSearch(searchTerm){\n    //console.log(\"Perform search using movieDB\");\n\n    const urlString =\"https://api.themoviedb.org/3/search/movie?api_key=753aff9045ea9cd4451a39c6b2898dcc&query=\"+searchTerm;\n    $.ajax({\n      url: urlString,\n      success: (searchResults) => {\n        //console.log(\"Data fetched successfully\");\n\n        const results = searchResults.results;\n        var movieRows =[];\n\n        results.forEach((movie) => {\n          movie.poster_src = \"https://image.tmdb.org/t/p/w500\" + movie.poster_path;\n          //const row =<MovieRow key= {movie.id} movie ={movie} />\n          // {this.state.rows}\n          movieRows.push(movie);\n\n        })\n        this.setState({rows: movieRows});\n      },\n      error: (xhr, status, err)  => {\n        console.error(\"Failed to fetch data\");\n\n      }\n\n    })\n\n\n }\n\n searchChangeHandler(event){\n  const searchMovie = event.target.value;\n  const boundObject =this;\n boundObject.performSearch(searchMovie);\n\n }\n\n  render() {\n        return (\n            <div>\n\n               <Header title ={this.state.title}/>\n\n                <input className=\"searchBar\" placeholder =\"Enter search term\" onChange={this.searchChangeHandler.bind(this)}/> \n\n               <MovieList movies={this.state.rows}/>\n\n \n               \n            </div>\n        );\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}